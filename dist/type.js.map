{"version":3,"sources":["../src/type.ts"],"sourcesContent":["// index.d.ts\r\n\r\nimport { CombinedSliceReducer, PayloadAction, Reducer } from \"@reduxjs/toolkit\";\r\nimport * as remoteStores from \"@remote-stores\";\r\nimport { Selector } from \"react-redux\";\r\n\r\nexport type RemoteType = {\r\n  name: string;\r\n  reducer: Reducer;\r\n  dispatchers: PayloadAction<unknown>;\r\n  selectors: Selector<unknown, unknown>;\r\n};\r\n\r\nexport type ExposeStoreType = {\r\n  [key: string]: RemoteType;\r\n};\r\n\r\nexport type ModuleName = keyof typeof remoteStores;\r\n\r\nexport type ImportModuleType = typeof import(\"@remote-stores\");\r\n\r\nexport type SliceName<M extends ModuleName> =\r\n  keyof ImportModuleType[M][\"default\"];\r\n\r\nexport type Selectors<\r\n  M extends ModuleName,\r\n  S extends SliceName<M> = SliceName<M>\r\n> = ImportModuleType[M][\"default\"][S] extends { selectors: infer T }\r\n  ? T\r\n  : never;\r\n\r\nexport type Dispatchers<\r\n  M extends ModuleName,\r\n  S extends SliceName<M> = SliceName<M>\r\n> = ImportModuleType[M][\"default\"][S] extends { dispatchers: infer T }\r\n  ? T\r\n  : never;\r\n\r\nexport type Action = {\r\n  [key in ModuleName]: {\r\n    [slice in SliceName<key>]: Dispatchers<key, slice>;\r\n  };\r\n};\r\n\r\nexport type Select = {\r\n  [key in ModuleName]: {\r\n    [slice in SliceName<key>]: Selectors<key, slice>;\r\n  };\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}